/*
PROBLEM STATEMENT ->
Pepcoding offers total of n courses labelled from 0 to n-1.

Some courses may have prerequisites. you have been given m pairs ai,bi. where 1 pair means you must take the course bi before the course ai.

Given the total number of courses numCourses and a list of the prerequisite pairs,
return the ordering of courses you should take to finish all courses. If it is impossible to finish all courses print -1.


// INPUT - > 
4 4
1 0
2 0
3 1
3 2

// OUTPUT
0 1 2 3 

// PREREQUISITE ->  TOPOLOGICAL SORT
*/

import java.io.*;
import java.util.*;


public class Main {

	public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String[] s = br.readLine().split(" ");
        int n = Integer.parseInt(s[0]);
        int m = Integer.parseInt(s[1]);
        
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0 ; i < n ; i++){
            graph.add(new ArrayList<Integer>());
        }
        
        for(int i = 0 ; i < m ; i++){
            String[] st = br.readLine().split(" ");
            int u = Integer.parseInt(st[0]);
            int v = Integer.parseInt(st[1]);
            graph.get(v).add(u);
        }
        
        int[] ans = kahnsAlgorithm(graph , n , m);
        for(int i : ans){
            System.out.print(i + " ");
        }
        
	}
	public static int[] kahnsAlgorithm(ArrayList<ArrayList<Integer>> graph , int n , int m){
	    
	    int[] indegree = new int[n];
	    
	    for(int i = 0 ; i < n ; i++){
	        for(int nbrs : graph.get(i)){
	            indegree[nbrs]++;
	        }
	     }
	      int[] ans = new int[n];
	    int idx = 0;
	    
	    Queue<Integer> q = new LinkedList<>();
	    
	    for(int i = 0 ; i < n ; i++){
	        if(indegree[i] == 0){
	            q.add(i);
	        }
	    }
	    
	    while(q.size() > 0){
	        int rem = q.remove();
	        
	        ans[idx] = rem;
	        idx++;
	        
	        for(int nbrs : graph.get(rem)){
	            indegree[nbrs]--;
	            
	            if(indegree[nbrs] == 0){
	                q.add(nbrs);
	            }
	            
	        }
	        
	    }
	    if(idx == n){
	        return ans;
	    }else{
	        return new int[]{-1};
	    }
	   
	}
	
}

}
