/*
PROBLEM STATEMENT ->

You are given a graph with N nodes and M directed edges. Find the number of Strongly connected components in the graph.
Input Format
First line contains two space separated integers,N and M. Then M lines follow, each line has 2 space separated integers ai and bi.
Output Format
Print in one line the number of strongly connected components in the graph.


Constraints

1<= N <= 10000
1<= M <= (N*(N-1))/2
1<= ai, bi <= N

Sample Input
5 6
1 4
1 3
2 4
3 4
4 5
5 1

Sample Output
2

*/

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) throws Exception {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        int n = Integer.parseInt(s[0]);
        int m = Integer.parseInt(s[1]);
        
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0 ; i < n;i++){
            graph.add(new ArrayList<>());
        }
        
        int[][] arr = new int[m][2];
        for(int i= 0 ; i < m ; i++){
            String[] st = br.readLine().split(" ");
            arr[i][0] = Integer.parseInt(st[0]);
            arr[i][1] = Integer.parseInt(st[1]);
        }
       
        for(int i = 0 ; i < m;i++){
            int u = arr[i][0] - 1;
            int v = arr[i][1] - 1;
            graph.get(u).add(v);
        }
        
        int ans = KosarajuAlgorithm(graph , n);
        System.out.println(ans);
	}
	public static int KosarajuAlgorithm(ArrayList<ArrayList<Integer>> graph , int n){
	    
	  // fill the stack for every vertex;
	    boolean[] visited = new boolean[n];
	    Stack<Integer> st = new Stack<>();
	    for(int i = 0 ; i < n ; i++){
            if(visited[i] == false){
	            Predfs(graph , i , visited , st);
	        }
	    }
	    
	    //reverse the graph (complement the graph)
	    ArrayList<ArrayList<Integer>> ngraph = reverse(graph , n);
	    
	    // dfs tp get strongly connectend component
	    visited = new boolean[n];
	    int count = 0;
	    
	    while(st.size() > 0){
	        int rem = st.pop();
	        
	        if(visited[rem] == true){
	            continue;
	        }
	        
	       if(visited[rem] == false){
	            count++;
	            Postdfs(ngraph , rem , visited);
	        }
	        
	    }
	    return count;
	}
	public static void Predfs(ArrayList<ArrayList<Integer>> graph , int src , boolean[] visited , Stack<Integer> st){
	    visited[src] = true;
	    for(int nbrs : graph.get(src)){
	        if(visited[nbrs] == false){
	            Predfs(graph , nbrs , visited , st);
	        }
	    }
	    st.push(src);
	}
	public static void Postdfs(ArrayList<ArrayList<Integer>> ngraph , int src , boolean[] visited){
	    visited[src] = true;
	    for(int nbrs : ngraph.get(src)){
	        if(visited[nbrs] == false){
	            Postdfs(ngraph , nbrs , visited);
	        }
	    }
	}
	public static ArrayList<ArrayList<Integer>> reverse(ArrayList<ArrayList<Integer>> graph , int n){
	    ArrayList<ArrayList<Integer>> ngraph = new ArrayList<>();
	    
	    for(int i = 0 ; i < n ;i++){
           ngraph.add(new ArrayList<>());
        }
	  
	    for(int i = 0 ; i < n;i++){
	        for(int nbrs : graph.get(i)){
	            ngraph.get(nbrs).add(i);
	        }
	   
	    }
	    return ngraph;
	}

}
